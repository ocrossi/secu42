##ASM analysis

### function main
`
Dump of assembler code for function main:
   0x0804853f <+0>:	push   ebp
   0x08048540 <+1>:	mov    ebp,esp
   0x08048542 <+3>:	and    esp,0xfffffff0
   0x08048545 <+6>:	call   0x80484d4 <p>
   0x0804854a <+11>:	leave
   0x0804854b <+12>:	ret
End of assembler dump.
`

<+0-+1>			prepares stack frame for current function
<+3>			binary alignment
<+6>			call to p without params (pushes EIP on stack and jumps  to 0x80484d4) 
<+11-+12>		clear stackframe

### function p
`
Dump of assembler code for function p:
   0x080484d4 <+0>:	push   ebp
   0x080484d5 <+1>:	mov    ebp,esp
   0x080484d7 <+3>:	sub    esp,0x68
   0x080484da <+6>:	mov    eax,ds:0x8049860
   0x080484df <+11>:	mov    DWORD PTR [esp],eax
   0x080484e2 <+14>:	call   0x80483b0 <fflush@plt>
   0x080484e7 <+19>:	lea    eax,[ebp-0x4c]
   0x080484ea <+22>:	mov    DWORD PTR [esp],eax
   0x080484ed <+25>:	call   0x80483c0 <gets@plt>
   0x080484f2 <+30>:	mov    eax,DWORD PTR [ebp+0x4]
   0x080484f5 <+33>:	mov    DWORD PTR [ebp-0xc],eax
   0x080484f8 <+36>:	mov    eax,DWORD PTR [ebp-0xc]
   0x080484fb <+39>:	and    eax,0xb0000000
   0x08048500 <+44>:	cmp    eax,0xb0000000
   0x08048505 <+49>:	jne    0x8048527 <p+83>
   0x08048507 <+51>:	mov    eax,0x8048620
   0x0804850c <+56>:	mov    edx,DWORD PTR [ebp-0xc]
   0x0804850f <+59>:	mov    DWORD PTR [esp+0x4],edx
   0x08048513 <+63>:	mov    DWORD PTR [esp],eax
   0x08048516 <+66>:	call   0x80483a0 <printf@plt>
   0x0804851b <+71>:	mov    DWORD PTR [esp],0x1
   0x08048522 <+78>:	call   0x80483d0 <_exit@plt>
   0x08048527 <+83>:	lea    eax,[ebp-0x4c]
   0x0804852a <+86>:	mov    DWORD PTR [esp],eax
   0x0804852d <+89>:	call   0x80483f0 <puts@plt>
   0x08048532 <+94>:	lea    eax,[ebp-0x4c]
   0x08048535 <+97>:	mov    DWORD PTR [esp],eax
   0x08048538 <+100>:	call   0x80483e0 <strdup@plt>
   0x0804853d <+105>:	leave
   0x0804853e <+106>:	ret
End of assembler dump.
`
<+0-+1>			prepares stack frame for current function
<+3>			allocates 104 bytes for current stackframe
<+6>			sets eax to 0x8049860, ds can be ignored on modern x86 cpus, no offset everything on the same memory segment
<+11>			preps 1st arg for fflush
<+14>			call to fflush (clears standard output stream)
<+19>			store effective address of ebp-0x4c in eax
<+22>			preps gets argumebt by moving eax val in esp
<+25>			call to gets  (push eip onto stack + jumps to addr of gets)
<+30-+36>		store result of gets on stack.
<+39>			bin and to set eax to 0xX00000000
<+44>			checks if conteent of eax starts with b, avoids jumping back on stack
<+49>			if cmp doest work, jump to line P+83
<+51-+78>		preps a printf annd prints address of eax, then exits
<+83-89>		load saved val of eax, puts result with eax as arg
<+94-+100>		strdup the res of the gets		
<+105-106>		clears stackframe

